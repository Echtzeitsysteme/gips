/*
 * generated by Xtext 2.33.0
 */
package org.emoflon.gips.debugger.validation;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.emoflon.gips.debugger.cplexLp.CplexLpPackage;
import org.emoflon.gips.debugger.cplexLp.VariableDecleration;
import org.emoflon.gips.debugger.services.CplexLpGrammarAccess;

import com.google.inject.Inject;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CplexLpValidator extends AbstractCplexLpValidator {

	@Inject
	private CplexLpGrammarAccess grammarAccess;

	@Check
	public void checkGreetingStartsWithCapital(VariableDecleration variable) {
		if (variable.getName() == null) {
			return;
		}

		var firstLetter = variable.getName().charAt(0);
		if (!(firstLetter == 'e' || firstLetter == 'E')) {
			return;
		}

		warning("Name should not start with the letter 'e'", CplexLpPackage.Literals.VARIABLE_DECLERATION__NAME,
				ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "InvalidTypeName", variable.getName());

//		var node = NodeModelUtils.findActualNodeFor(greeting);

//        if (!Character.isUpperCase(greeting.name.charAt(0))) {
//            val node = NodeModelUtils.findActualNodeFor(greeting)
//
//            for (n : node.asTreeIterable) {
//                val ge = n.grammarElement
//                if (ge instanceof Keyword && ge == greetingAccess.helloKeyword_0) {
//                    messageAcceptor.acceptWarning(
//                        'Name should start with a capital',
//                        greeting,
//                        n.offset,
//                        n.length,
//                        INVALID_NAME
//                    )
//                }
//            }
//
//        }
	}

//	@Check
//	public void checkVariableIsBound(Variable variable) {
//		var model = (Model) EcoreUtil2.getRootContainer(variable);
//		var boundSection = model.getBound();
//		if(boundSection != null) {
//
//		}
//		warning("Variable is not bound", CplexLpPackage.Literals.VARIABLE__NAME, ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "NotBound", variable.getName());
//	}

//	@Check
//	public void checkVariableIsCorrectlyBound(BoundExpression variable) {
//		var model = (Model) EcoreUtil2.getRootContainer(variable);
//		var boundSection = model.getBound();
//		if(boundSection != null) {
//			variable.g
//		}
//		warning("It's bound!", CplexLpPackage.Literals.BOUND_EXPRESSION__VARIABLE, ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "NotBound");
//	}

//	@Check
//	public void checkTypeNameStartsWithCapital(ObjectiveExpression equation) {
//		if(equation.getName() != null) {
//			if(equation.getName().charAt(0) == 'e') {
//				warning("Name should not start with the letter 'e'", CplexLpPackage.Literals.OBJECTIVE_EXPRESSION__NAME,
//						ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "InvalidTypeName", equation.getName());
//			}
//		}
//	}
//
//	public void checkTypeNameStartsWithCapital(ConstrainExpression equation) {
//		if(equation.getName() != null) {
//			if(equation.getName().charAt(0) == 'e') {
//				warning("Name should not start with the letter 'e'", CplexLpPackage.Literals.CONSTRAIN_EXPRESSION__NAME,
//						ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "InvalidTypeName", equation.getName());
//			}
//		}
//	}

}
