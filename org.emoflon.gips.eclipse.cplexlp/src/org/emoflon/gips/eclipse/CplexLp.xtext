grammar org.emoflon.gips.eclipse.CplexLp /*with org.eclipse.xtext.common.Terminals*/ hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate cplexLp "http://www.emoflon.org/gips/eclipse/CplexLp"

Model:
	objective = SectionObjective
	constraint = SectionConstraint?
	bound = SectionBound?
	(integerValue = SectionIntegerValue? & binaryValue = SectionBinaryValue?)
	'End'
;
 
SectionObjective:
	goal = (MIN | MAX)
	statement = ObjectiveExpression?
;

MIN: 'minimize' | 'minimum' | 'min';
MAX: 'maximize' | 'maximum' | 'max';

ObjectiveExpression:
	(name=ValidID ':')? 
	expression = LinearExpression
;

SectionConstraint: {SectionConstraint}
	(('subject' 'to') | ('such' 'that') | 'st' | 's.t.' | 'st.')
	(statements += ConstraintExpression )*
;

ConstraintExpression:
	(name=ValidID ':')?
	left = LinearExpression 
	relation = RelationalOperator 
	right = LinearConstant
	//EndOfLine
;

SectionBound: {SectionBound}
	('bound' | 'bounds')
	statements += BoundExpression*
;

BoundExpression:
	UpperAndLowerBoundExpression | LowerBoundExpression | UpperBoundExpression | EqualsToBoundExpression | FreeBoundExpression
;

UpperAndLowerBoundExpression:
	lowerBound = LinearConstant
	'<='
	variable = VariableRef
	'<='
	upperBound = LinearConstant
;

LowerBoundExpression:
	lowerBound = LinearConstant
	'<='
	variable = VariableRef
;

UpperBoundExpression:
	variable = VariableRef
	'<='
	upperBound = LinearConstant
;

EqualsToBoundExpression:
	variable = VariableRef
	'='
	bound = LinearConstant
;

FreeBoundExpression:
	variable = VariableRef 'free'
;

SectionIntegerValue: {SectionIntegerValue}
	('general' | 'generals' | 'gen')
	variables += VariableDecleration*
;

SectionBinaryValue: {SectionBinaryValue}
	('binary' | 'binaries' | 'bin')
	variables += VariableDecleration*
;

LinearExpression:
	terms += FirstLinearTerm
	(terms += LinearTerm)*
;

LinearTerm:
	operator=LinearOperators (
		coefficient=NumberLiteral variable=VariableRef |
		coefficient=NumberLiteral |
		variable=VariableRef
	)
;

FirstLinearTerm returns LinearTerm:
	operator=LinearOperators? (
		coefficient=NumberLiteral variable=VariableRef |
		coefficient=NumberLiteral |
		variable=VariableRef
	)
;

LinearConstant:
	NumberLiteral | InfinityLiteral 
;

Variable: VariableDecleration | VariableRef;

VariableRef: // returns Variable:
	ref=[VariableDecleration|ValidID]
;

VariableDecleration:  //returns Variable:
	name = ValidID
;

ValidID: ID;

NumberLiteral: value = Number;
InfinityLiteral: value = Infinity;
//RelationLiteral: value = RelationOperator;

Number :  FLOAT | INTEGER;
terminal INTEGER returns ecore::EInt: '-'? DIGIT+;
terminal FLOAT returns ecore::EDouble: INTEGER '.' DIGIT+;

enum LinearOperators: 
	PLUS = '+' |
	MINUS = '-'
;

enum Infinity:
	POS_INFINITY = '+infinity' |
	POS_INFINITY = '+inf' |
	NEG_INFINITY = '-infinity' |
	NEG_INFINITY = '-inf'
;

enum RelationalOperator:
  EqualTo = '=' |
  GreaterThan = '>'  |
  GreaterThanOrEqual = '>='  |
  GreaterThanOrEqual = '=>'  |
  LessThan = '<' |
  LessThanOrEqual = '<=' | 
  LessThanOrEqual = '=<'
;

//@Override 
terminal ID returns ecore::EString: 
	('a'..'z'|'A'..'Z'|'!'|'"'|'#'|'$'|'%'|'&'|'('|')'|'/'|','|';'|'?'|'@'|'_'|'`'|"'"|'{'|'}'|'|'|'~')('a'..'z'|'A'..'Z'|'0'..'9'|'!'|'"'|'#'|'$'|'%'|'&'|'('|')'|'/'|','|'.'|';'|'?'|'@'|'_'|'`'|"'"|'{'|'}'|'|'|'~'|'>'|'-')*
;

// needed to support negative integers and floats
// org.eclipse.xtext.common.Terminals can't be included because of the INT Rule
terminal fragment DIGIT: '0'..'9';
 
 //from org.eclipse.xtext.common.Terminals
terminal ML_COMMENT : '\\*' -> '*\\';
terminal SL_COMMENT : '\\' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS         : (' '|'\t'|'\r'|'\n')+;
terminal ANY_OTHER: .;

//terminal END_OF_LINE: ('\r'? '\n');