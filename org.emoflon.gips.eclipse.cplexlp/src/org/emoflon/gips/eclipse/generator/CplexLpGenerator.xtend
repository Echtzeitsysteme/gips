/*
 * generated by Xtext 2.33.0
 */
package org.emoflon.gips.eclipse.generator
 
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.trace.node.TracedAccessors
import com.google.inject.Inject
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.resources.IWorkspace
import org.eclipse.core.resources.IProject
import java.io.FileNotFoundException
  
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CplexLpGenerator extends AbstractGenerator {

//	@TracedAccessors(CplexLpFactory)
//    static class CplexLpTraceExtensions {
//    }
    
//    @Inject
//    extension CplexLpTraceExtensions

//private void exportXMI(String absuloteTargetFolderPath) {
//    // change MyLanguage with your language name
//    Injector injector = new MyLanguageStandaloneSetup()
//            .createInjectorAndDoEMFRegistration();
//    XtextResourceSet resourceSet = injector
//            .getInstance(XtextResourceSet.class);
//
//    // .ext ist the extension of the model file
//    String inputURI = "file:///" + absuloteTargetFolderPath + "/MyFile.ext";
//    String outputURI = "file:///" + absuloteTargetFolderPath + "/MyFile.xmi";
//    URI uri = URI.createURI(inputURI);
//    Resource xtextResource = resourceSet.getResource(uri, true);
//
//    EcoreUtil.resolveAll(xtextResource);
//
//    Resource xmiResource = resourceSet
//            .createResource(URI.createURI(outputURI));
//    xmiResource.getContents().add(xtextResource.getContents().get(0));
//    try {
//        xmiResource.save(null);
//    } catch (IOException e) {
//        e.printStackTrace();
//    }
//}


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl())
//		
//		val rs = new ResourceSetImpl;
//		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl())
//		val output = rs.createResource(URI.createURI(resource.URI.trimFileExtension+".xmi"))
//		
//		val model = resource.contents.get(0) as Model;
//		output.contents.add(model)
//		EcoreUtil.resolveAll(output)
//		
//		val workspace = getWorkspace()
//		val project = getProjectOfResource(workspace, output)
//		if(project === null)
//			throw new FileNotFoundException("Could not find xtext model file: "+ output.URI.path)
//			
//		output.save(null);
		
//        for (model : resource.allContents.filter(Model).toIterable) {
//            val name = resource.URI.trimFileExtension.lastSegment
//            fsa.generateTracedFile("./lpfiles/" + name + ".java", model, '''
//                package org.emoflon.gips.debugger.cplexLp;
//                
//                public class Lp_«name» {
//                    public static void main(String[] args) {
//                    	System.out.println("«model.objective.goal»");
//                    	System.out.println("«model.objective.statement.name» : «model.objective.statement.expression»");
//                    	
//                    	«FOR cs : model.constrain.statements»
//                    		System.out.println("«cs.name»: «cs.left»  «cs.relation»  «cs.right»");
//                    	«ENDFOR»
//                    	
//                    	«FOR bs : model.bound.statements»
//                    		System.out.println("«bs»");
//                    	«ENDFOR»
//                    }
//                    
//                }
//            ''')
//        }
	}
	
	def static IWorkspace getWorkspace() {
		return ResourcesPlugin.getWorkspace()
	}
	
	
	def static IProject getProjectOfResource(IWorkspace workspace, Resource resource) {
		if(resource.URI.segmentCount<2)
				return null;
				
		for(project : workspace.root.projects) {
			val projectName = resource.URI.segment(1)
			if(project.name.equalsIgnoreCase(projectName)) {
				return project;
			}
		}
		
		return null;
	}
}

