/*
 * generated by Xtext 2.33.0
 */
package org.emoflon.gips.eclipse.validation;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.linking.impl.LinkingHelper;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.emoflon.gips.eclipse.cplexLp.CplexLpPackage;
import org.emoflon.gips.eclipse.cplexLp.Model;
import org.emoflon.gips.eclipse.cplexLp.Variable;

import com.google.inject.Inject;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CplexLpValidator extends AbstractCplexLpValidator {

//	@Inject
//	private CplexLpGrammarAccess grammarAccess;

	@Inject
	private LinkingHelper linkHelper;

	public CplexLpValidator() {
		System.out.println("STARTED VAL");
	}

	@Check
	public void checkVariableDoesNotStartWithE(Variable variable) {
		String name = variable.getName();
		if (name == null)
			return;

		if (Character.toLowerCase(name.charAt(0)) == 'e')
			warning("Names should not start with the letter 'e'", CplexLpPackage.Literals.VARIABLE__NAME,
					ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "InvalidName", name);
	}

	@Check
	public void checkForUnusedVariables(Model model) {
		Map<String, EObject> variableDeclarations = new HashMap<>();
		Set<String> variableReferences = new HashSet<>();

		TreeIterator<EObject> iterator = model.eAllContents();
		while (iterator.hasNext()) {
			EObject next = iterator.next();
			if (next instanceof Variable variable) {
				if (variable.getName() == null) {
					String crossReference = linkHelper.getCrossRefNodeAsString(NodeModelUtils.getNode(variable), true);
					variableReferences.add(crossReference);
				} else {
					variableDeclarations.put(variable.getName(), variable);
				}
			}
		}

		for (String declaredVariable : variableDeclarations.keySet()) {
			if (!variableReferences.contains(declaredVariable)) {
				EObject eObject = variableDeclarations.get(declaredVariable);
				warning("Variable is never used elsewhere", eObject, CplexLpPackage.Literals.VARIABLE__NAME,
						ValidationMessageAcceptor.INSIGNIFICANT_INDEX, "OnlyUsedOnce");
			}
		}

		variableDeclarations.clear();
		variableReferences.clear();
	}

}
