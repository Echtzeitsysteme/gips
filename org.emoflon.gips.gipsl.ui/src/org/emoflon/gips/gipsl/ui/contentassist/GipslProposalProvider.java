/*
 * generated by Xtext 2.25.0
 */
package org.emoflon.gips.gipsl.ui.contentassist;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jface.text.contentassist.CompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.emoflon.gips.gipsl.gipsl.EditorGTFile;
import org.emoflon.gips.gipsl.scoping.GipslScopeContextUtil;
import org.emoflon.gips.gipsl.ui.nature.GIPSNature;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class GipslProposalProvider extends AbstractGipslProposalProvider {

	@Override
	public void completeImportedPattern_File(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeImportedPattern_File(model, assignment, context, acceptor);
		IProject currentProject = GipslScopeContextUtil.getCurrentProject();
		String[] lines = context.getCurrentNode().getText().split("\n");
		lines = lines[0].split("\r");

		String currentSelection = lines[0].replace("\"", "").replace("/", "\\").trim().replace("%20", " ");
		String rest = context.getCurrentNode().getText().replace(lines[0], "");

		IWorkspace ws = ResourcesPlugin.getWorkspace();
		for (IProject project : ws.getRoot().getProjects()) {
			if (project.equals(currentProject))
				continue;

			try {
				if (!(project.hasNature("org.emoflon.ibex.gt.editor.ui.nature")
						|| project.hasNature(GIPSNature.NATURE_ID)))
					continue;
			} catch (CoreException e) {
				continue;
			}

			File projectFile = new File(project.getLocation().toPortableString());
			List<File> gtFiles = new LinkedList<>();
			GipslScopeContextUtil.gatherFilesWithEnding(gtFiles, projectFile, ".gt", true);
			GipslScopeContextUtil.gatherFilesWithEnding(gtFiles, projectFile, ".gipsl", true);
			for (File gtFile : gtFiles) {

				XtextResourceSet rs = new XtextResourceSet();
				URI gtModelUri;
				try {
					gtModelUri = URI.createFileURI(gtFile.getCanonicalPath());
				} catch (IOException e) {
					continue;
				}

				String fileString = gtModelUri.toFileString();
				if (!currentSelection.isBlank() && !fileString.contains(currentSelection))
					continue;

				Resource resource = rs.getResource(gtModelUri, true);
				EcoreUtil2.resolveLazyCrossReferences(resource, () -> false);
				EObject gtModel = resource.getContents().get(0);

				if (gtModel == null)
					continue;

				String replacement = "\"" + gtModelUri.toFileString() + "\"";
				int start = (currentSelection.isBlank()) ? 0 : currentSelection.length() + 1;
				replacement = replacement.substring(start);
				int cursor = replacement.length();
				replacement = replacement + rest;

				int replacementLength = (currentSelection.isBlank())
						? context.getCurrentNode().getText().length() - currentSelection.length() - 1
						: context.getCurrentNode().getText().length() - currentSelection.length();

				if (gtModel instanceof org.emoflon.ibex.gt.editor.gT.EditorGTFile gtEditorFile) {
					acceptor.accept(
							new CompletionProposal(replacement, context.getOffset(), replacementLength, cursor));
				} else if (gtModel instanceof EditorGTFile gipsEditorFile) {
					acceptor.accept(
							new CompletionProposal(replacement, context.getOffset(), replacementLength, cursor));
				} else {
					continue;
				}
			}

		}

	}
}
