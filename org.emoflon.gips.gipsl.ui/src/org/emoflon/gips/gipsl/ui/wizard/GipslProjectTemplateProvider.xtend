/*
 * generated by Xtext 2.25.0
 */
package org.emoflon.gips.gipsl.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class GipslProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new HelloWorldProject]
	}
}

@ProjectTemplate(label="simple hello world example", icon="project_template.png", description="<p><b>simple hello world example</b></p>
<p>This is a hello world example for Gipsl using the ECore metamodel itself.</p>")
final class HelloWorldProject {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val path = text("Package:", "gipsl", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		path.enabled = advanced.value
		if (!advanced.value) {
			path.value = "gipsl"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "src"
			addFile('''src/«path»/Model.gipsl''', '''
				import "http://www.eclipse.org/emf/2002/Ecore"
				// ^import a metamodel here
				
				// specify an example rule
				rule exampleRule {
					clazz : EClass {
						++ -eAllOperations -> op
					}
					
					op : EOperation
				}
				
				// create a mapping on the rule
				mapping mapNode with exampleRule;
				
				// create a constraint on one class
				constraint -> class::EOperation {
					mappings.mapNode->filter(m | m.nodes().clazz.^abstract)->count() > self.lowerBound
				}
				
				// create an objective for the mapping
				objective nodeObj -> mapping::mapNode {
					self.nodes().op.upperBound * sin(73)
				}
				
				// create an overall objective
				global objective : min {
					2 * nodeObj
				}
			''')
		])
	}
}
