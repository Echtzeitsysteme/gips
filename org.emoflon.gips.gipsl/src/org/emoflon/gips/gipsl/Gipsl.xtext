grammar org.emoflon.gips.gipsl.Gipsl with org.emoflon.ibex.gt.editor.GT

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emoflon.org/ibex/gt/editor/GT" as GT

generate gipsl "http://www.emoflon.org/gips/gipsl/Gipsl"

@Override 
EditorGTFile: {EditorGTFile}
	package = Package
	(imports+=EditorImport)*
	(importedPattern+=ImportedPattern)*
	config = GipsConfig
  	(patterns+=EditorPattern |
  	conditions+=EditorCondition |
  	mappings += GipsMapping |
  	constraints += GipsConstraint |
  	objectives += GipsObjective)*
  	(globalObjective = GipsGlobalObjective)?	
;

Package: 
	'package' name=GipsStringLiteral
;

ImportedPattern : 
	'from' file = GipsStringLiteral 'import' pattern = [GT::EditorPattern|ID]
;

GipsConfig : {GipsConfig}
	'config' '{'
	'solver' ':=' solver=SolverType '[' ('home' ':=' home=GipsStringLiteral ',' 'license' ':=' license=GipsStringLiteral)? ']' ';'
	('launchConfig' ':=' enableLaunchConfig = GipsBoolean '[' 'main' ':=' mainLoc=GipsStringLiteral ']' ';')?
	('timeLimit' ':=' enableLimit = GipsBoolean '[' 'value' ':=' timeLimit=GipsDouble ']' ';')?
	('randomSeed' ':=' enableSeed = GipsBoolean '[' 'value' ':=' rndSeed=GipsInteger ']' ';')?
	('presolve' ':=' enablePresolve = GipsBoolean ';')?
	('debugOutput' ':=' enableDebugOutput = GipsBoolean ';')?
	('tolerance' ':=' enableTolerance = GipsBoolean '[' 'value' ':=' tolerance=GipsDouble ']' ';')?
	('lpOutput' ':=' enableLpOutput = GipsBoolean '[' 'path' ':=' path=GipsStringLiteral ']' ';')?
	('threadCount' ':=' enableThreadCount = GipsBoolean '[' 'value' ':=' threads=GipsInteger ']' ';')?
	'}'
;

enum SolverType:
	GUROBI='GUROBI' | GLPK='GLPK' | CPLEX='CPLEX'
;

GipsMapping :
	'mapping' name=ID 'with' pattern=[GT::EditorPattern|ID] ('{'
		(variables += GipsMappingVariable)+
	'}')?';'
;

GipsMappingVariable :
	'var' name=ID ':' type=[ecore::EDataType] (bound ?= 'bind' parameter=[GT::EditorParameter])?
;

GipsConstraint : 
	'constraint' '->' context=(GipsGlobalContext | GipsMappingContext | GipsTypeContext | GipsPatternContext) '{'
		expr = GipsBool
	'}'
;

GipsObjective : 
	'objective' name=ID '->' context=(GipsMappingContext | GipsTypeContext | GipsPatternContext) '{'
		expr = GipsArithmeticExpr
	'}'
;

GipsGlobalContext: {GlobalContext}
	'global'
;

GipsMappingContext:
	'mapping' '::' mapping = [GipsMapping|ID]
;

GipsTypeContext:
	'class' '::' type = [ecore::EClassifier]
;

GipsPatternContext:
	'pattern' '::' pattern = [GT::EditorPattern|ID]
;

GipsObjectiveExpression:
	objective=[GipsObjective|ID]
;

GipsGlobalObjective :
	'global' 'objective' ':' objectiveGoal = GipsObjectiveGoal ('{'
		expr = GipsArithmeticExpr
	'}')?
;

enum GipsObjectiveGoal:
	MIN = 'min' | MAX = 'max'
;

GipsBool:
	expr=GipsBoolExpr
;

GipsBoolExpr:
	GipsImplicationBoolExpr
;

GipsImplicationBoolExpr returns GipsBoolExpr:
	GipsOrBoolExpr({GipsImplicationBoolExpr.left = current} operator=GipsImplOperator right=GipsOrBoolExpr)*
;

GipsOrBoolExpr returns GipsBoolExpr:
	GipsAndBoolExpr({GipsOrBoolExpr.left = current} operator=GipsOrOperator right=GipsAndBoolExpr)*
;

GipsAndBoolExpr returns GipsBoolExpr:
	GipsNotBoolExpr({GipsAndBoolExpr.left = current} operator=GipsAndOperator right=GipsNotBoolExpr)*
;

GipsNotBoolExpr returns GipsBoolExpr: {GipsNotBoolExpr}
	'!' operand=GipsBracketBoolExpr | GipsBracketBoolExpr
;

GipsBracketBoolExpr returns GipsBoolExpr: {GipsBracketBoolExpr}
	'[' operand=GipsBoolExpr ']'  | GipsBooleanLiteral | GipsRelExpr
;

enum GipsImplOperator:
  IMPLICATION='=>' |
  EQUIVALENCE='<=>'
;

enum GipsOrOperator:
  OR='|' |
  XOR='^'
;

enum GipsAndOperator:
  AND='&'
;

GipsBooleanLiteral:
	literal = GipsBoolean
;

GipsRelExpr:
	left=GipsArithmeticExpr (operator=GipsRelOperator right=GipsArithmeticExpr)?
;

enum GipsRelOperator:
  GREATER='>' |
  GREATER_OR_EQUAL='>=' |
  EQUAL='==' |
  UNEQUAL='!=' |
  SMALLER_OR_EQUAL='<=' |
  SMALLER='<'
;

GipsAttributeExpr:
	GipsMappingAttributeExpr | GipsTypeAttributeExpr | GipsPatternAttributeExpr | GipsContextExpr | GipsLambdaAttributeExpression | GipsLambdaSelfExpression
;

GipsMappingAttributeExpr returns GipsAttributeExpr: {GipsMappingAttributeExpr}
	'mappings' '.' mapping=[GipsMapping|ID] '->' expr = GipsStreamExpr
;

GipsTypeAttributeExpr returns GipsAttributeExpr: {GipsTypeAttributeExpr}
	'classes' '.' type=[ecore::EClass] '->' expr = GipsStreamExpr
;

GipsPatternAttributeExpr returns GipsAttributeExpr: {GipsPatternAttributeExpr}
	'patterns' '.' pattern=[GT::EditorPattern|ID] '->' expr = GipsStreamExpr
;

//TODO: Allow optional nested lambda expressions
GipsLambdaAttributeExpression returns GipsAttributeExpr: {GipsLambdaAttributeExpression}
	var=[GipsLambdaExpression|ID] '.' (expr = GipsNodeAttributeExpr | expr = GipsVariableOperationExpression | expr = GipsFeatureExpr | expr = GipsMappingVariableReference) // ('->' stream = GipsStreamExpr)?
;

GipsLambdaSelfExpression returns GipsAttributeExpr: {GipsLambdaSelfExpression}
	var=[GipsLambdaExpression|ID] '()'
;

GipsContextExpr returns GipsAttributeExpr: {GipsContextExpr}
	'self' ('.' typeCast=GipsTypeCast)? ('.' (expr = GipsNodeAttributeExpr | expr = GipsVariableOperationExpression | expr = GipsFeatureExpr | expr = GipsMappingVariableReference) ('->' stream = GipsStreamExpr)?)?
;

GipsVariableOperationExpression returns GipsVariableOperationExpression: 
	{GipsMappingValue} 'value()' |
	{GipsMappingCheckValue} 'isMapped' '(' (count=GipsContextExpr)? ')'
;

GipsMappingVariableReference:
	'variables().' var=[GipsMappingVariable|ID]
;

GipsTypeCast:
	'toType(' type=[ecore::EClass] ')'
;

GipsNodeAttributeExpr: {GipsNodeAttributeExpr}
	'nodes().' node=[GT::EditorNode|ID] ('.' typeCast=GipsTypeCast)? ('.' expr = GipsFeatureExpr)?
;

GipsFeatureExpr:
	GipsFeatureNavigation
;

GipsFeatureNavigation returns GipsFeatureExpr:
	GipsFeatureLit ({GipsFeatureNavigation.left=current} '.' right=GipsFeatureNavigation)?
;

GipsFeatureLit returns GipsFeatureExpr: {GipsFeatureLit}
	feature = [ecore::EStructuralFeature] ('.' typeCast=GipsTypeCast)?
;

GipsArithmeticExpr:
	GipsSumArithmeticExpr
;

GipsSumArithmeticExpr returns GipsArithmeticExpr:
	GipsProductArithmeticExpr({GipsSumArithmeticExpr.left = current} operator=GipsSumOperator right=GipsProductArithmeticExpr)*
;

GipsProductArithmeticExpr returns GipsArithmeticExpr:
	GipsExpArithmeticExpr({GipsProductArithmeticExpr.left = current} operator=GipsProductOperator right=GipsExpArithmeticExpr)*
;

GipsExpArithmeticExpr returns GipsArithmeticExpr:
	GipsUnaryArithmeticExpr({GipsExpArithmeticExpr.left = current} operator=GipsExpOperator right=GipsUnaryArithmeticExpr)*
;

GipsUnaryArithmeticExpr returns GipsArithmeticExpr: {GipsUnaryArithmeticExpr}
	operator=GipsArithmeticUnaryOperator '(' operand=GipsBracketExpr ')' | GipsBracketExpr
;

GipsBracketExpr returns GipsArithmeticExpr: {GipsBracketExpr}
	'(' operand=GipsArithmeticExpr ')' | GipsExpressionOperand
;

GipsExpressionOperand:
	GipsAttributeExpr | GipsObjectiveExpression | GipsArithmeticLiteral | GipsConstant
;

GipsArithmeticLiteral:
	value = (GipsDoubleLiteral | GipsIntegerLiteral)
;

GipsConstant:
	value = GipsConstantLiteral
;

enum GipsConstantLiteral:
	PI = 'pi' |
	E = 'e' |
	NULL = 'null'
;

enum GipsProductOperator:
	MULT='*' |
 	DIV='/'
;

enum GipsExpOperator:
 	POW='pow'	|
 	LOG='log'
;

enum GipsSumOperator:
	PLUS='+' 	|
	MINUS='-' 	
;

enum GipsArithmeticUnaryOperator:
	NEG='-'		|
	ABS='abs'	|
	SQRT='sqrt' |
	sin='sin'	|
	cos='cos'
;

GipsStreamExpr:
	GipsStreamNavigation
;

GipsStreamNavigation returns GipsStreamExpr:
	GipsStreamLit({GipsStreamNavigation.left=current}'->' right=GipsStreamNavigation)?
;

GipsStreamLit returns GipsStreamExpr:
	{GipsSelect} 'typesOf' '(' type=[ecore::EClassifier] ')' |
	{GipsStreamSet} operator=GipsStreamSetOperator lambda = GipsLambdaExpression |
	{GipsStreamArithmetic} operator=GipsStreamArithmeticOperator lambda = GipsLambdaExpression |
	{GipsContains} 'contains' '(' expr = GipsContextExpr ')' |
	{GipsStreamBoolExpr} operator=GipsStreamNoArgOperator
;

GipsLambdaExpression:
	'(' name=ID '|' expr=GipsBoolExpr ')'
;

enum GipsStreamSetOperator:
	FILTER='filter'
;

enum GipsStreamArithmeticOperator:
	SUM = 'sum'
;

enum GipsStreamNoArgOperator:
	NOT_EMPTY = 'notEmpty()' |
	COUNT = 'count()'
;

GipsDoubleLiteral:
	GipsDouble
;

GipsIntegerLiteral:
	GipsInteger
;

GipsDouble returns ecore::EDouble:
	('-')?INT '.' INT
;

GipsInteger returns ecore::EInt:
	(('-')? INT)
;

@Override
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9')*
;

GipsBoolean returns ecore::EBoolean:
	TRUE | FALSE
;

terminal TRUE returns ecore::EBoolean:
	'true'
;

terminal FALSE returns ecore::EBoolean:
	'false'
;

GipsStringLiteral:
	STRING
;

@Override
terminal STRING returns ecore::EString:
	'"' ( '""' | !('"') )* '"'
;