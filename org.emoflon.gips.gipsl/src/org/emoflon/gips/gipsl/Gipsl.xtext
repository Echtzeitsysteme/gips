grammar org.emoflon.gips.gipsl.Gipsl with org.emoflon.ibex.gt.editor.GT

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emoflon.org/ibex/gt/editor/GT" as GT

generate gipsl "http://www.emoflon.org/gips/gipsl/Gipsl"

@Override 
EditorGTFile: {EditorGTFile}
	package = Package
	(imports+=EditorImport)*
	(importedPattern+=ImportedPattern)*
	config = GipsConfig
  	(patterns+=EditorPattern |
  	conditions+=EditorCondition |
  	mappings += GipsMapping |
  	constants += GipsConstant |
  	constraints += GipsConstraint |
  	functions += GipsLinearFunction)*
  	(objective = GipsObjective)?	
;

Package: 
	'package' name=GipsStringLiteral
;

ImportedPattern : 
	'from' file = GipsStringLiteral 'import' pattern = [GT::EditorPattern|ID]
;

GipsConfig : {GipsConfig}
	'config' '{'
	'solver' ':=' solver=SolverType ('[' ('home' ':=' home=GipsStringLiteral ',' 'license' ':=' license=GipsStringLiteral)? ']')? ';'
	('launchConfig' ':=' enableLaunchConfig = GipsBoolean '[' 'main' ':=' mainLoc=GipsStringLiteral ']' ';')?
	('timeLimit' ':=' enableLimit = GipsBoolean '[' 'value' ':=' timeLimit=GipsDouble (',' 'includeInitTime' ':=' includeInitTime=GipsBoolean)? ']' ';')?
	('randomSeed' ':=' enableSeed = GipsBoolean '[' 'value' ':=' rndSeed=GipsInteger ']' ';')?
	('presolve' ':=' presolve=PresolveType ';')?
	('debugOutput' ':=' enableDebugOutput = GipsBoolean ';')?
	('tolerance' ':=' enableTolerance = GipsBoolean '[' 'value' ':=' tolerance=GipsDouble ']' ';')?
	('lpOutput' ':=' enableLpOutput = GipsBoolean '[' 'path' ':=' path=GipsStringLiteral ']' ';')?
	('threadCount' ':=' enableThreadCount = GipsBoolean '[' 'value' ':=' threads=GipsInteger ']' ';')?
	'}'
;

enum SolverType:
	GUROBI='GUROBI' | GLPK='GLPK' | CPLEX='CPLEX'
;

enum PresolveType:
	NONE='none' | AUTO='auto' | CONSERVATIVE='conservative' | AGGRESSIVE='aggressive'
;

GipsMapping :
	'mapping' name=ID 'to' pattern=[GT::EditorPattern|ID] ('{'
		(variables += GipsMappingVariable)+
	'}')?';'
;

GipsMappingVariable :
	'var' name=ID ':' type=[ecore::EDataType] (bound ?= 'bind' parameter=[GT::EditorParameter])?
;

GipsConstant:
	'let' name=ID ':=' expression = GipsBooleanExpression ';'
;

GipsConstantReference :
	'constants' '.' constant = [GipsConstant | ID] (setExpression = GipsSetExpression)?
;

GipsConstraint : 
	'constraint' (isLocal?='with' context=[ecore::EObject|ID])? '{'
		(constants += GipsConstant)*
		expression = GipsBooleanExpression
	'}'
;	

GipsLinearFunction : 
	'function' name=ID 'with' context=[ecore::EObject|ID] '{'
		(constants += GipsConstant)*
		expression = GipsArithmeticExpression
	'}'
;

GipsLinearFunctionReference:
	'functions' '.' function=[GipsLinearFunction|ID]
;

GipsObjective :
	'objective' ':' goal = OptimizationGoal '{'
		(constants += GipsConstant)*
		expression = GipsArithmeticExpression
	'}'
;

enum OptimizationGoal:
	MIN = 'min' | MAX = 'max'
;

GipsBooleanExpression:
	GipsBooleanImplication
;

GipsBooleanImplication returns GipsBooleanExpression:
	GipsBooleanDisjunction({GipsBooleanImplication.left = current} operator=ImplicationOperator right=GipsBooleanDisjunction)*
;

GipsBooleanDisjunction returns GipsBooleanExpression:
	GipsBooleanConjunction({GipsBooleanDisjunction.left = current} operator=DisjunctionOperator right=GipsBooleanConjunction)*
;

GipsBooleanConjunction returns GipsBooleanExpression:
	GipsBooleanNegation({GipsBooleanConjunction.left = current} operator=ConjunctionOperator right=GipsBooleanNegation)*
;

GipsBooleanNegation returns GipsBooleanExpression: {GipsBooleanNegation}
	'!' operand=GipsBooleanBracket | GipsBooleanBracket
;

GipsBooleanBracket returns GipsBooleanExpression: {GipsBooleanBracket}
	'[' operand=GipsBooleanExpression ']'  | GipsBooleanLiteral | GipsRelationalExpression
;

enum ImplicationOperator:
  IMPLICATION='=>' |
  EQUIVALENCE='<=>'
;

enum DisjunctionOperator:
  OR='|' |
  XOR='^'
;

enum ConjunctionOperator:
  AND='&'
;

GipsBooleanLiteral:
	literal = GipsBoolean
;

GipsRelationalExpression returns GipsBooleanExpression:
	GipsArithmeticExpression({GipsRelationalExpression.left = current} operator=RelationalOperator right=GipsArithmeticExpression)*
;

enum RelationalOperator:
  GREATER='>' |
  GREATER_OR_EQUAL='>=' |
  EQUAL='==' |
  UNEQUAL='!=' |
  SMALLER_OR_EQUAL='<=' |
  SMALLER='<'
;



GipsArithmeticExpression:
	GipsArithmeticSum
;

GipsArithmeticSum returns GipsArithmeticExpression:
	GipsArithmeticProduct({GipsArithmeticSum.left = current} operator=GipsSumOperator right=GipsArithmeticProduct)*
;

GipsArithmeticProduct returns GipsArithmeticExpression:
	GipsArithmeticExponential({GipsArithmeticProduct.left = current} operator=GipsProductOperator right=GipsArithmeticExponential)*
;

GipsArithmeticExponential returns GipsArithmeticExpression:
	GipsArithmeticUnary({GipsArithmeticExponential.left = current} operator=GipsExponentialOperator right=GipsArithmeticUnary)*
;

GipsArithmeticUnary returns GipsArithmeticExpression: {GipsArithmeticUnary}
	operator=GipsUnaryOperator '(' operand=GipsArithmeticBracket ')' | GipsArithmeticBracket
;

GipsArithmeticBracket returns GipsArithmeticExpression: {GipsArithmeticBracket}
	'(' operand=GipsArithmeticExpression ')' | GipsArithmeticOperand
;

GipsArithmeticOperand:
	GipsValueExpression | GipsLinearFunctionReference | GipsArithmeticLiteral | GipsArithmeticConstant | GipsConstantReference
;

GipsArithmeticLiteral:
	value = (GipsDoubleLiteral | GipsIntegerLiteral)
;

GipsArithmeticConstant:
	value = GipsConstantLiteral
;

enum GipsConstantLiteral:
	PI = 'pi' |
	E = 'e' |
	NULL = 'null'
;

enum GipsProductOperator:
	MULT='*' |
 	DIV='/'
;

enum GipsExponentialOperator:
 	POW='pow'	|
 	LOG='log'
;

enum GipsSumOperator:
	PLUS='+' 	|
	MINUS='-' 	
;

enum GipsUnaryOperator:
	NEG='-'		|
	ABS='abs'	|
	SQRT='sqrt' |
	sin='sin'	|
	cos='cos'
;

GipsValueExpression:
	value = (
		GipsMappingExpression 			| 	
		GipsTypeExpression 				|
		GipsPatternExpression 			|
		GipsRuleExpression 				|
		GipsLocalContextExpression 		|
		GipsSetElementExpression
	) (setExperession = GipsSetExpression)?
;

GipsMappingExpression: {GipsMappingExpression}
	'mappings' '.' mapping=[GipsMapping|ID]
;

GipsTypeExpression: {GipsTypeExpression}
	'types' '.' type=[ecore::EClass]
;

GipsPatternExpression: {GipsPatternExpression}
	'patterns' '.' pattern=[GT::EditorPattern|ID]
;

GipsRuleExpression: {GipsRuleExpression}
	'rules' '.' rule=[GT::EditorPattern|ID]
;

GipsLocalContextExpression: {GipsLocalContextExpression}
	'context' 
	 (   expression = GipsNodeExpression 				| 
	 	 expression = GipsVariableReferenceExpression 	| 
	 	 expression = GipsAttributeExpression
	 )?
;

GipsSetElementExpression: {GipsSetElementExpression}
	'element'
	( 	 expression = GipsNodeExpression 				|
		 expression = GipsVariableReferenceExpression 	|
		 expression = GipsAttributeExpression 
	)?
;

GipsVariableReferenceExpression returns GipsVariableReferenceExpression: 
	'.' 
	(
		(isMappingValue ?= 'value') |
 		(isGenericValue ?= 'variables') '.' variable = [GipsMappingVariable|ID]
	)
;

GipsNodeExpression: {GipsNodeExpression}
	'.' 'nodes' '.' node=[GT::EditorNode|ID]
	(attributeExpression = GipsAttributeExpression)?
;

GipsAttributeExpression: {GipsAttributeExpression}
	'.'
	(
		attribute = GipsAttributeLiteral right = GipsAttributeExpression |
		attribute = GipsAttributeLiteral
	)
;

GipsAttributeLiteral:
	literal = [ecore::EStructuralFeature]
;

GipsSetExpression: {GipsSetExpression}
	'->'
	(
		operation = GipsSetOperation (right = GipsSetExpression)? |
		(operation = GipsReduceOperation)?
	)
;

// Operates on a set of 0-N values and produces a set of 0-M values.
GipsSetOperation:
	GipsFilterOperation | GipsSelectOperation | GipsAlgorithmOperation | GipsConcatenationOperation | GipsTransformOperation
;

GipsFilterOperation:
 	'filter' '(' expression = GipsBooleanExpression ')'
;

GipsSelectOperation:
	GipsTypeSelect
;

GipsTypeSelect:
	'selectType' '(' type = [ecore::EClassifier] ')'
;

GipsAlgorithmOperation:
	GipsSortOperation | GipsSimpleAlgorithm
;

GipsSortOperation:
	'sort' '(' predicate=GipsSortPredicate ')'
;

GipsSortPredicate:
	'e1' 
	(	e1 = GipsNodeExpression  		|
		e1 = GipsAttributeExpression 
	)?
	relation = RelationalOperator
	'e2'
	(	e2 = GipsNodeExpression  		|
		e2 = GipsAttributeExpression 
	)?
;

GipsSimpleAlgorithm:
	operator = AlgorithmOperator '()'
;

enum AlgorithmOperator :
	UNIQUE = 'unique'
;

// Currently we only allow the concatenation of sets containing the same types of values.
GipsConcatenationOperation:
	operator = ConcatenationOperator '(' value = GipsValueExpression ')'
;

enum ConcatenationOperator :
	PREPEND = 'prepend' 	|
	APPEND = 'append'
;

GipsTransformOperation:
	'transform' '(' expression=GipsSetElementExpression ')'
;

// Reduces a set of 0-N values to exactly one value or null.
GipsReduceOperation :
	GipsSumOperation | GipsSimpleSelect | GipsQueryOperation
;
 
GipsSumOperation:
  	'sum' '(' expression = GipsArithmeticExpression ')'
;

GipsSimpleSelect:
	operator = SelectOperator '()'
;

enum SelectOperator :
	FIRST = 'first' |
	LAST = 'last'	|
	ANY = 'any'
;

GipsQueryOperation:
	GipsTypeQuery | GipsElementQuery | GipsSimpleQuery
;

GipsTypeQuery:
	'containsType' '(' type = [ecore::EClassifier] ')'
;

GipsElementQuery:
	'containsElement' '(' element = GipsValueExpression ')'
;

GipsSimpleQuery:
	operator = QueryOperator '()'
;

enum QueryOperator :
	EMPTY = 'empty' |
	NOT_EMPTY = 'notEmpty' |
	COUNT = 'count'
;

GipsDoubleLiteral:
	GipsDouble
;

GipsIntegerLiteral:
	GipsInteger
;

GipsDouble returns ecore::EDouble:
	('-')?INT '.' INT
;

GipsInteger returns ecore::EInt:
	(('-')? INT)
;

@Override
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9')*
;

GipsBoolean returns ecore::EBoolean:
	TRUE | FALSE
;

terminal TRUE returns ecore::EBoolean:
	'true'
;

terminal FALSE returns ecore::EBoolean:
	'false'
;

GipsStringLiteral:
	STRING
;

@Override
terminal STRING returns ecore::EString:
	'"' ( '""' | !('"') )* '"'
;