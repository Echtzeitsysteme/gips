/*
 * generated by Xtext 2.25.0
 */
package org.emoflon.roam.roamslang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.testing.util.ParseHelper
import org.emoflon.roam.roamslang.roamSLang.EditorGTFile
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.emoflon.roam.roamslang.roamSLang.RoamMappingContext
import org.emoflon.roam.roamslang.roamSLang.RoamTypeContext

@ExtendWith(InjectionExtension)
@InjectWith(RoamSLangInjectorProvider)
class RoamSLangParsingTest {
	
	//
	// Variables and constants
	//
	
	public static val ecoreImport = 'http://www.eclipse.org/emf/2002/Ecore'
	
	@Inject
	ParseHelper<EditorGTFile> parseHelper
	
	@Inject extension ValidationTestHelper validationHelper
	
	//
	// Tests
	//
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			rule testRule {
				package: EPackage
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testNonEmptyMappings() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
		''')
		assertValid(result)
		val mappings = result.mappings
		Assertions.assertFalse(mappings.isEmpty)
	}
	
	@Test
	def void testNonEmptyConstraints() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			constraint -> mapping::map {
				1 != 2
			}
		''')
		assertValid(result)
		val constraints = result.constraints
		Assertions.assertFalse(constraints.isEmpty)
	}
	
	@Test
	def void testNonEmptyObjectives() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective obj -> mapping::map {
				1
			}
		''')
		assertValid(result)
		val objectives = result.objectives
		Assertions.assertFalse(objectives.isEmpty)
	}
	
	@Test
	def void testNonEmptyGlobalObjectives() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective obj -> mapping::map {
				1
			}
			global objective : min {
				2 * obj
			}
		''')
		assertValid(result)
		Assertions.assertNotNull(result.globalObjective)
	}
	
	// Wrong naming / uniqueness tests
	@Test
	def void testMappingNameNotUnique() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			mapping map with testPattern;
		''')
		assertInvalid(result, 1, 0)
	}
	
	@Test
	def void testObjectiveNameNotUnique() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective o -> mapping::map {
				1
			}
			objective 0 -> mapping::map {
				2
			}
		''')
		assertInvalid(result, 1, 0)
	}
	
	@Test
	def void testGlobalObjectiveNotUnique() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective o -> mapping::map {
				1
			}
			global objective : min {
				2*o
			}
			global objective : min {
				2*o
			}
		''')
		assertInvalid(result, 1, 0)
	}
	
	@Test
	def void testObjectiveIsUselessWarning() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective o -> mapping::map {
				0
			}
		''')
		assertInvalid(result, 0, 1)
	}
	
	@Test
	def void testMappingFromRule() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			rule testRule {
				c: EClassifier {
					.name := "Test"
				}
			}
			mapping map with testRule;
		''')
		assertValid(result)
		Assertions.assertFalse(result.mappings.isEmpty)
		Assertions.assertEquals(1, result.mappings.size)
		val map = result.mappings.get(0)
		Assertions.assertEquals("testRule", map.rule.name)
		Assertions.assertEquals("map", map.name)
	}
	
	@Test
	def void testConstraintOnMapping() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			rule testRule {
				c: EClassifier {
					.name := "Test"
				}
			}
			mapping map with testRule;
			constraint -> mapping::map {
				1 != 2
			}
		''')
		assertValid(result)
		Assertions.assertFalse(result.constraints.isEmpty)
		Assertions.assertEquals(1, result.constraints.size)
		val cstr = result.constraints.get(0)
		val mappingContext = cstr.context as RoamMappingContext
		Assertions.assertEquals("map", mappingContext.mapping.name)
	}
	
	@Test
	def void testObjectiveOnMapping() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			rule testRule {
				c: EClassifier {
					.name := "Test"
				}
			}
			mapping map with testRule;
			objective obj -> mapping::map {
				3
			}
		''')
		assertValid(result)
		Assertions.assertFalse(result.objectives.isEmpty)
		Assertions.assertEquals(1, result.objectives.size)
		val obj = result.objectives.get(0)
		val mappingContext = obj.context as RoamMappingContext
		Assertions.assertEquals("map", mappingContext.mapping.name)
	}
	
	@Test
	def void testObjectiveOnClass() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			objective obj -> class::EClass {
				3
			}
		''')
		assertValid(result)
		Assertions.assertFalse(result.objectives.isEmpty)
		Assertions.assertEquals(1, result.objectives.size)
		val obj = result.objectives.get(0)
		val typeContext = obj.context as RoamTypeContext
		Assertions.assertEquals("EClass", typeContext.type.name)
	}
	
	@Test
	def void testGlobalObjectiveGoal() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			objective obja -> class::EClass {
				3
			}
			global objective : min {
				obja
			}
		''')
		assertValid(result)
		Assertions.assertFalse(result.objectives.isEmpty)
		Assertions.assertEquals(1, result.objectives.size)
		val gobj = result.globalObjective
		Assertions.assertNotNull(gobj)
		Assertions.assertEquals("MIN", gobj.objectiveGoal.getName)
	}
	
	//
	// Utility methods
	//
	
	def void assertValid(EditorGTFile file) {
		Assertions.assertNotNull(file)
		this.validationHelper.assertNoIssues(file)
		assertFile(file)
	}
	
	static def void assertValidResource(EditorGTFile file) {
		Assertions.assertNotNull(file)
		Assertions.assertTrue(file.eResource.errors.isEmpty)
		Assertions.assertTrue(file.eResource.warnings.isEmpty)
	}
	
	static def void assertFile(EditorGTFile file) {
		assertValidResource(file)
		Assertions.assertEquals(1, file.imports.size)
		Assertions.assertEquals(ecoreImport, file.imports.get(0).name)
	}
	
	def void assertInvalid(EditorGTFile file, int noOfErr, int noOfWarn) {
		Assertions.assertNotNull(file)
		assertInvalidResource(file, noOfErr, noOfWarn)
	}
	
	static def void assertInvalidResource(EditorGTFile file, int noOfErr, int noOfWarn) {
		Assertions.assertNotNull(file)
		Assertions.assertEquals(noOfErr, file.eResource.errors.size)
		Assertions.assertEquals(noOfWarn, file.eResource.warnings.size)
	}
	
}
