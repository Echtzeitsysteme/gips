/*
 * generated by Xtext 2.25.0
 */
package org.emoflon.roam.roamslang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.testing.util.ParseHelper
import org.emoflon.roam.roamslang.roamSLang.EditorGTFile
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(RoamSLangInjectorProvider)
class RoamSLangParsingTest {
	
	//
	// Variables and constants
	//
	
	public static val ecoreImport = 'http://www.eclipse.org/emf/2002/Ecore'
	
	@Inject
	ParseHelper<EditorGTFile> parseHelper
	
	@Inject extension ValidationTestHelper validationHelper
	
	//
	// Tests
	//
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			rule testRule {
				package: EPackage
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testNonEmptyMappings() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
		''')
		assertValid(result)
		Assertions.assertNotNull(result)
		val mappings = result.mappings
		Assertions.assertFalse(mappings.isEmpty)
	}
	
	@Test
	def void testNonEmptyConstraints() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			constraint -> mapping::map {
				1 != 2
			}
		''')
		assertValid(result)
		Assertions.assertNotNull(result)
		val constraints = result.constraints
		Assertions.assertFalse(constraints.isEmpty)
	}
	
	@Test
	def void testNonEmptyObjectives() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective obj -> mapping::map {
				1
			}
		''')
		assertValid(result)
		Assertions.assertNotNull(result)
		val objectives = result.objectives
		Assertions.assertFalse(objectives.isEmpty)
	}
	
	@Test
	def void testNonEmptyGlobalObjectives() {
		val result = parseHelper.parse('''
			import "«ecoreImport»"
			pattern testPattern {
				p: EPackage
			}
			mapping map with testPattern;
			objective obj -> mapping::map {
				1
			}
			global objective : min {
				2 * obj
			}
		''')
		assertValid(result)
		Assertions.assertNotNull(result)
		Assertions.assertNotNull(result.globalObjective)
	}
	
	//
	// Utility methods
	//
	
	def void assertValid(EditorGTFile file) {
		Assertions.assertNotNull(file)
		this.validationHelper.assertNoIssues(file)
		// TODO: call assertFile(...) here?
	}
}
