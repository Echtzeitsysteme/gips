/*
 * generated by Xtext 2.25.0
 */
package org.emoflon.roam.roamslang.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class RoamSLangProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new HelloWorldProject]
	}
}

@ProjectTemplate(label="iflye example", icon="project_template.png", description="<p><b>iflye example</b></p>
<p>This is a hello world example for RoamSLang using the iflye framework.</p>")
final class HelloWorldProject {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val path = text("Package:", "rslang", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		path.enabled = advanced.value
		if (!advanced.value) {
			path.value = "rslang"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "src"
			addFile('''src/«path»/Model.rslang''', '''
				import "platform:/resource/network.model/model/Model.ecore"
				// ^import a metamodel here
				// you need a working iflye workspace to use this metamodel
				// check out: https://github.com/Echtzeitsysteme/iflye
				
				// specify an example rule
				rule serverRule {
					-- node : Server
				}
				
				// create a mapping on the rule
				mapping mapServer with serverRule;
				
				// create a constraint on the mapping
				constraint -> mapping::mapServer {
					1 != 2
				}
				
				// create an objective for the mapping
				objective serverObj -> mapping::mapServer {
					1
				}
				
				// create an overall objective
				global objective : min {
					2 * serverObj
				}
			''')
		])
	}
}
